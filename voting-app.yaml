apiVersion: v1
kind: Namespace
metadata:
  name: vote
---
# Redis
apiVersion: apps/v1
kind: Deployment
metadata: { name: redis, namespace: vote }
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports: [{ containerPort: 6379 }]
---
apiVersion: v1
kind: Service
metadata: { name: redis, namespace: vote }
spec:
  selector: { app: redis }
  ports: [{ port: 6379, targetPort: 6379 }]
---
# Postgres (ephemeral for learning)
apiVersion: apps/v1
kind: Deployment
metadata: { name: db, namespace: vote }
spec:
  replicas: 1
  selector: { matchLabels: { app: db } }
  template:
    metadata: { labels: { app: db } }
    spec:
      containers:
      - name: postgres
        image: postgres:16
        ports: [{ containerPort: 5432 }]
        env:
          - { name: POSTGRES_DB, value: "votes" }
          - { name: POSTGRES_USER, value: "postgres" }
          - { name: POSTGRES_PASSWORD, value: "postgres" }
        volumeMounts:
          - { name: data, mountPath: /var/lib/postgresql/data }
      volumes:
        - name: data
          emptyDir: {}   # fine for practice (data resets if pod restarts)
---
apiVersion: v1
kind: Service
metadata: { name: db, namespace: vote }
spec:
  selector: { app: db }
  ports: [{ port: 5432, targetPort: 5432 }]
---
# Vote frontend
apiVersion: apps/v1
kind: Deployment
metadata: { name: vote, namespace: vote }
spec:
  replicas: 2
  selector: { matchLabels: { app: vote } }
  template:
    metadata: { labels: { app: vote } }
    spec:
      containers:
      - name: vote
        image: dockersamples/examplevotingapp_vote
        ports: [{ containerPort: 80 }]
        env:
          - { name: REDIS_HOST, value: "redis" }
---
apiVersion: v1
kind: Service
metadata: { name: vote-svc, namespace: vote }
spec:
  selector: { app: vote }
  ports: [{ port: 80, targetPort: 80 }]
---
# Worker
apiVersion: apps/v1
kind: Deployment
metadata: { name: worker, namespace: vote }
spec:
  replicas: 1
  selector: { matchLabels: { app: worker } }
  template:
    metadata: { labels: { app: worker } }
    spec:
      containers:
      - name: worker
        image: dockersamples/examplevotingapp_worker
        env:
          - { name: REDIS_HOST, value: "redis" }
          - { name: PGHOST, value: "db" }
          - { name: PGDATABASE, value: "votes" }
          - { name: PGUSER, value: "postgres" }
          - { name: PGPASSWORD, value: "postgres" }
---
# Result frontend
apiVersion: apps/v1
kind: Deployment
metadata: { name: result, namespace: vote }
spec:
  replicas: 2
  selector: { matchLabels: { app: result } }
  template:
    metadata: { labels: { app: result } }
    spec:
      containers:
      - name: result
        image: dockersamples/examplevotingapp_result
        ports: [{ containerPort: 80 }]
        env:
          - { name: PGHOST, value: "db" }
          - { name: PGDATABASE, value: "votes" }
          - { name: PGUSER, value: "postgres" }
          - { name: PGPASSWORD, value: "postgres" }
---
apiVersion: v1
kind: Service
metadata: { name: result-svc, namespace: vote }
spec:
  selector: { app: result }
  ports: [{ port: 80, targetPort: 80 }]

